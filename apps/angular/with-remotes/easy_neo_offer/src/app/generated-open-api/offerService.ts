/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * OfferService
 * This service manages all use cases that correspond to the 'offer' resources in the easy 2.0 offering system
 * OpenAPI spec version: 0.1
 */
import * as axios from 'axios';
import type {
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

export interface PersonalDataResponse {
  /** Discriminator property */
  product_type?: string;
}

export type PersonalDataODProductType = typeof PersonalDataODProductType[keyof typeof PersonalDataODProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonalDataODProductType = {
  OD: 'OD',
} as const;

/**
 * ###### Short offer
###### <u>Angaben zum Kurzangebot</u> Pers√∂nliche Angaben zum Angebot
 */
export type PersonalDataOD = Omit<PersonalDataResponse, 'product_type'> & {
  birth_date: DateAttribute;
  gender?: ListAttribute;
  gross_annual_income?: DoubleAttribute;
  existing_insurances?: BooleanAttribute;
  number_existing_insurances?: ListAttribute;
  accumulated_annual_pensions?: DoubleAttribute;
  smoker: BooleanAttribute;
  professional_data: PersonalDataProfessionalData;
  product_type: PersonalDataODProductType;
} & Required<Pick<Omit<PersonalDataResponse, 'product_type'> & {
  birth_date: DateAttribute;
  gender?: ListAttribute;
  gross_annual_income?: DoubleAttribute;
  existing_insurances?: BooleanAttribute;
  number_existing_insurances?: ListAttribute;
  accumulated_annual_pensions?: DoubleAttribute;
  smoker: BooleanAttribute;
  professional_data: PersonalDataProfessionalData;
  product_type: PersonalDataODProductType;
}, 'birth_date' | 'productType' | 'professional_data' | 'smoker' | 'product_type'>>;

/**
 * @nullable
 */
export type DateAttributeValue = CustomDate | null;

/**
 * ###### Date attribute including value and meta data
###### <u>Datum-Attribute inkl. Wert und Metadaten</u>
 */
export interface DateAttribute {
  /** @nullable */
  value?: DateAttributeValue;
  metadata: DateMetaData;
}

/**
 * date
 */
export type CustomDate = string;

/**
 * ###### Date meta data
###### <u>Date Metadaten</u>
 */
export type DateMetaData = MetaData & {
  /** ###### Minimum date
###### <u>Minimales Datum</u> */
  min?: CustomDate;
  /** ###### Maximum date
###### <u>Maximales Datum</u> */
  max?: CustomDate;
};

/**
 * ###### Meta data
###### <u>Metadaten</u>
 */
export interface MetaData {
  validation?: ValidationMetaData;
  /** ###### Required property
###### <u>Erforderliche Eigenschaft</u> */
  required?: boolean;
  /** ###### Fixed property
###### <u>Unver√§nderliche Eigenschaft</u> */
  fixed?: boolean;
}

/**
 * ###### Validation message level
###### <u>Level der Validierungsnachricht</u>
 */
export type ValidationMetaDataMsgLevel = typeof ValidationMetaDataMsgLevel[keyof typeof ValidationMetaDataMsgLevel];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ValidationMetaDataMsgLevel = {
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR',
} as const;

/**
 * ###### Validation meta data
###### <u>Validierung Metadaten</u>
 */
export interface ValidationMetaData {
  /** ###### Validation message level
###### <u>Level der Validierungsnachricht</u> */
  msg_level: ValidationMetaDataMsgLevel;
  /** ###### Validation message
###### <u>Validierungsnachricht</u> */
  msg: string;
}

/**
 * ###### List attribute including value and meta data
###### <u>List-Attribute inkl. Wert und Metadaten</u>
 */
export interface ListAttribute {
  selectedOption?: ListItemMetaData;
  metadata: ListMetaData;
}

/**
 * ###### Metadata for a list item
###### <u>Metadaten f√ºr ein Listenelement</u>
 */
export interface ListItemMetaData {
  /** ###### List item value
###### <u>Wert eines Listenelementes</u> */
  id: string;
  /** ###### List item text
###### <u>Text eines Listenelementes</u> */
  value: string;
  /** ###### Fixed or unselectable property
###### <u>Unver√§nderliche oder nicht selektierbare Eigenschaft</u> */
  fixed?: boolean;
}

/**
 * ###### Metadata for list items
###### <u>Metadaten f√ºr Listenelemente</u>
 */
export type ListMetaData = MetaData & {
  /** ###### All list items
###### <u>Alle Listenelmente</u> */
  options: ListItemMetaData[];
} & Required<Pick<MetaData & {
  /** ###### All list items
###### <u>Alle Listenelmente</u> */
  options: ListItemMetaData[];
}, 'options'>>;

/**
 * ###### Number attribute including value and meta data
###### <u>Number-Attribute inkl. Wert und Metadaten</u>
 */
export interface DoubleAttribute {
  /** @nullable */
  value?: number | null;
  metadata: DoubleMetaData;
}

/**
 * ###### Number meta data
###### <u>Number Metadaten</u>
 */
export type DoubleMetaData = MetaData & {
  /** ###### Minimum
###### <u>Minimum</u> */
  min?: number;
  /** ###### Maximum
###### <u>Maximum</u> */
  max?: number;
};

/**
 * ###### Boolean attribute including value and meta data
###### <u>Boolean-Attribute inkl. Wert und Metadaten</u>
 */
export interface BooleanAttribute {
  /** @nullable */
  value?: boolean | null;
  metadata: MetaData;
}

/**
 * ###### Professional details
###### <u>Beruflichen Angaben</u>
 */
export interface PersonalDataProfessionalData {
  qualification: ListAttribute;
  occupation: ListAttribute;
  physical_job_proportion?: IntegerAttribute;
  travel_job_proportion?: IntegerAttribute;
  office_job_proportion?: IntegerAttribute;
  employed_since?: DateAttribute;
  personnel_responsibility?: IntegerAttribute;
  educational_attainment?: ListAttribute;
  education?: ListAttribute;
  /** ###### Determined risk group
###### <u>Ermittelte Risikogruppe</u> */
  risk_group?: string;
  /** ###### Determined risk group ratio
###### <u>Ermittelter Risikogruppenanteil</u> */
  risk_group_ratio?: number;
  /** ###### Scoring risk group
###### <u>Risikogruppe aus Scoring Service</u> */
  scoring_risk_group?: string;
  /** ###### Scoring risk group ratio
###### <u>Risikogruppenanteil aus Scoring Service</u> */
  scoring_risk_group_ratio?: number;
  /** ###### Scoring max pension
###### <u>maxPension aus Scoring Service</u> */
  max_pension?: number;
  /** ###### Scoring final age
###### <u>finalAge aus Scoring Service</u> */
  final_age?: number;
  /** ###### Scoring max entry age
###### <u>maxEntryAge aus Scoring Service</u> */
  max_entry_age?: number;
}

/**
 * ###### Integer attribute including value and meta data
###### <u>Integer-Attribute inkl. Wert und Metadaten</u>
 */
export interface IntegerAttribute {
  /** @nullable */
  value?: number | null;
  metadata: IntegerMetaData;
}

/**
 * ###### Integer meta data
###### <u>Integer Metadaten</u>
 */
export type IntegerMetaData = MetaData & {
  /** ###### Minimum
###### <u>Minimum</u> */
  min?: number;
  /** ###### Maximum
###### <u>Maximum</u> */
  max?: number;
};

/**
 * ###### API rror
###### <u>API Fehler</u>
 */
export interface ApiError {
  /** ###### Error code
###### <u>Fehlercode</u> */
  code: string;
  /** ###### Error message
###### <u>Fehlernachricht</u> */
  message: string;
}

export interface TariffDataResponse {
  /** Discriminator property */
  product_type?: string;
}

export type TariffDataODProductType = typeof TariffDataODProductType[keyof typeof TariffDataODProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TariffDataODProductType = {
  OD: 'OD',
} as const;

/**
 * ###### Data for an occupational disability tariff
###### <u>Daten f√ºr ein Berufsunf√§higkeitstarif</u>
 */
export type TariffDataOD = Omit<TariffDataResponse, 'product_type'> & {
  general_options: TariffDataGeneralOptions;
  dynamic_options: TariffDataDynamicOptions;
  other_options: TariffDataOtherOptions;
  risk_options: TariffDataRiskOptions;
  calculation_result?: TariffDataCalculationResult;
  product_type: TariffDataODProductType;
} & Required<Pick<Omit<TariffDataResponse, 'product_type'> & {
  general_options: TariffDataGeneralOptions;
  dynamic_options: TariffDataDynamicOptions;
  other_options: TariffDataOtherOptions;
  risk_options: TariffDataRiskOptions;
  calculation_result?: TariffDataCalculationResult;
  product_type: TariffDataODProductType;
}, 'dynamic_options' | 'general_options' | 'other_options' | 'risk_options' | 'product_type'>>;

/**
 * Allgemeine Tarifeingaben
 */
export interface TariffDataGeneralOptions {
  start_of_insurance: DateAttributeRequired;
  final_insurance_age: IntegerAttributeRequired;
  benefit_expiration: ListAttributeRequired;
  benefit_expiration_date?: DateAttributeRequired;
  benefit_final_age: IntegerAttributeRequired;
  appropriation_of_surplus: ListAttributeRequired;
  contract_type: ListAttributeRequired;
  type_of_specification: ListAttributeRequired;
  premium_collecting_mode: ListAttributeRequired;
  value_of_specification?: DoubleAttributeRequired;
}

export type DateAttributeRequired = DateAttribute & {
  value: CustomDate;
} & Required<Pick<DateAttribute & {
  value: CustomDate;
}, 'value'>>;

/**
 * ###### Integer attribute including value and meta data
###### <u>Integer-Attribute inkl. Wert und Metadaten</u>
 */
export interface IntegerAttributeRequired {
  value: number;
  metadata: IntegerMetaData;
}

/**
 * ###### List attribute including value and meta data
###### <u>List-Attribute inkl. Wert und Metadaten</u>
 */
export interface ListAttributeRequired {
  selectedOption: ListItemMetaData;
  metadata: ListMetaData;
}

/**
 * ###### Number attribute including value and meta data
###### <u>Number-Attribute inkl. Wert und Metadaten</u>
 */
export interface DoubleAttributeRequired {
  value: number;
  metadata: DoubleMetaData;
}

/**
 * Dynamikoptionen
 */
export interface TariffDataDynamicOptions {
  dynamic: BooleanAttributeRequired;
  percentage?: ListAttributeRequired;
}

/**
 * ###### Boolean attribute including value and meta data
###### <u>Boolean-Attribute inkl. Wert und Metadaten</u>
 */
export interface BooleanAttributeRequired {
  value: boolean;
  metadata: MetaData;
}

/**
 * Weitere Tarifoptionen
 */
export interface TariffDataOtherOptions {
  target_group_concept: ListAttributeRequired;
  rising_pension: BooleanAttributeRequired;
  rate_of_rising_pension?: ListAttribute;
  benefit_during_sick_leave: BooleanAttributeRequired;
  grace_period: IntegerAttributeRequired;
}

/**
 * Risikodaten
 */
export interface TariffDataRiskOptions {
  risk_group?: ListAttribute;
  risk_group_ratio?: IntegerAttribute;
  risk_vote_available: BooleanAttributeRequired;
  risk_premium?: IntegerAttribute;
}

/**
 * ###### General result data of a insurance calculation
###### <u>Allgemeine Ergebnisdaten der Kalkulation einer Versicherung</u>
 */
export interface TariffDataCalculationResult {
  /** ###### Premium per collecting mode (net)
###### <u>Beitrag je Zahlweise (netto)</u> */
  premium_net: number;
  /** ###### Premium per collecting mode (gross)
###### <u>Beitrag je Zahlweise (brutto)</u> */
  premium_gross: number;
  /** ###### Pension (monthly)
###### <u>Rente (monatlich)</u> */
  pension: number;
}

export interface PersonalDataValidation {
  /** Discriminator property */
  product_type: string;
  /** ###### A personal data attribute that is required for partial validation
###### <u>Ein Personendaten-Attribut, welches f√ºr eine partielle Validierung ben√∂tigt wird</u> */
  changed_attribute: string;
}

export type PersonalDataValidationODProductType = typeof PersonalDataValidationODProductType[keyof typeof PersonalDataValidationODProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonalDataValidationODProductType = {
  OD: 'OD',
} as const;

/**
 * ###### Personal data for validation
###### <u>Personendaten zur Validierung</u>
 */
export type PersonalDataValidationOD = Omit<PersonalDataValidation, 'product_type'> & {
  offer: OfferODRequest;
  product_type: PersonalDataValidationODProductType;
} & Required<Pick<Omit<PersonalDataValidation, 'product_type'> & {
  offer: OfferODRequest;
  product_type: PersonalDataValidationODProductType;
}, 'offer'>>;

export type OfferODRequestProductType = typeof OfferODRequestProductType[keyof typeof OfferODRequestProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OfferODRequestProductType = {
  OD: 'OD',
} as const;

/**
 * ###### An offer contains all the necessary personal and tariff information for a calculation and the creation of a short proposal
###### <u>Ein Angebot enth√§lt alle notwendigen pers√∂nlichen und tariflichen Angaben f√ºr eine Kalkulation und eine Erstellung eines Kurzangebots</u>
 */
export type OfferODRequest = Omit<OfferRequest, 'product_type'> & {
  /** primary key */
  readonly id?: number;
  /** update timestamp */
  update_date?: CustomDateTime;
  /** foreign key to process resource */
  process_id: number;
  product?: Product;
  tariff_data?: TariffDataODRequest;
  personal_data: PersonalDataODRequest;
  risk_data?: RiskData;
  short_offer_data?: ShortOfferData;
  product_type: OfferODRequestProductType;
} & Required<Pick<Omit<OfferRequest, 'product_type'> & {
  /** primary key */
  readonly id?: number;
  /** update timestamp */
  update_date?: CustomDateTime;
  /** foreign key to process resource */
  process_id: number;
  product?: Product;
  tariff_data?: TariffDataODRequest;
  personal_data: PersonalDataODRequest;
  risk_data?: RiskData;
  short_offer_data?: ShortOfferData;
  product_type: OfferODRequestProductType;
}, 'personal_data' | 'process_id' | 'productType' | 'product_type'>>;

export interface OfferRequest {
  /** Discriminator property */
  product_type?: string;
}

/**
 * date-time
 */
export type CustomDateTime = string;

/**
 * ###### Insurance product
###### <u>Versicherungsprodukt</u>
 */
export interface Product {
  /** ###### Product group
###### <u>Produktgruppe</u> */
  group: string;
  /** ###### Product layer
###### <u>Schicht</u> */
  layer: string;
  /** ###### Markteting name
###### <u>Marketingname</u> */
  marketing_name: string;
  /** ###### Product name
###### <u>Produktname</u> */
  name: string;
  /** ###### Tariff generation
###### <u>Tarifgeneration</u> */
  tariff_generation: string;
  /**
   * ###### Tariff abbreviation
###### <u>Tarifk√ºrzel</u>
   * @minLength 3
   * @maxLength 12
   */
  tariff: string;
}

export type TariffDataODRequestProductType = typeof TariffDataODRequestProductType[keyof typeof TariffDataODRequestProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TariffDataODRequestProductType = {
  OD: 'OD',
} as const;

/**
 * ###### Data for an occupational disability tariff
###### <u>Daten f√ºr ein Berufsunf√§higkeitstarif</u>
 */
export type TariffDataODRequest = Omit<TariffDataRequest, 'product_type'> & {
  general_options: TariffDataGeneralOptionsRequest;
  dynamic_options: TariffDataDynamicOptionsRequest;
  other_options: TariffDataOtherOptionsRequest;
  risk_options: TariffDataRiskOptionsRequest;
  calculation_result?: TariffDataCalculationResult;
  product_type: TariffDataODRequestProductType;
} & Required<Pick<Omit<TariffDataRequest, 'product_type'> & {
  general_options: TariffDataGeneralOptionsRequest;
  dynamic_options: TariffDataDynamicOptionsRequest;
  other_options: TariffDataOtherOptionsRequest;
  risk_options: TariffDataRiskOptionsRequest;
  calculation_result?: TariffDataCalculationResult;
  product_type: TariffDataODRequestProductType;
}, 'dynamic_options' | 'general_options' | 'other_options' | 'risk_options' | 'product_type'>>;

export interface TariffDataRequest {
  /** Discriminator property */
  product_type?: string;
}

/**
 * Allgemeine Tarifeingaben
 */
export type TariffDataGeneralOptionsRequest = TariffDataGeneralOptions & {
  start_of_insurance: DateAttributeRequired;
  final_insurance_age: IntegerAttributeRequired;
  benefit_expiration: ListAttributeRequired;
  benefit_expiration_date?: DateAttributeRequired;
  benefit_final_age: IntegerAttributeRequired;
  appropriation_of_surplus: ListAttributeRequired;
  contract_type: ListAttributeRequired;
  type_of_specification: ListAttributeRequired;
  premium_collecting_mode: ListAttributeRequired;
  value_of_specification?: DoubleAttributeRequired;
};

/**
 * Dynamikoptionen
 */
export interface TariffDataDynamicOptionsRequest {
  dynamic: BooleanAttributeRequired;
  percentage?: ListAttributeRequired;
}

/**
 * Weitere Tarifoptionen
 */
export interface TariffDataOtherOptionsRequest {
  target_group_concept: ListAttributeRequired;
  rising_pension: BooleanAttributeRequired;
  rate_of_rising_pension?: ListAttribute;
  benefit_during_sick_leave: BooleanAttributeRequired;
  grace_period: IntegerAttributeRequired;
}

/**
 * Risikodaten
 */
export interface TariffDataRiskOptionsRequest {
  risk_group?: ListAttribute;
  risk_group_ratio?: IntegerAttribute;
  risk_vote_available: BooleanAttributeRequired;
  risk_premium?: IntegerAttribute;
}

export type PersonalDataODRequestProductType = typeof PersonalDataODRequestProductType[keyof typeof PersonalDataODRequestProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PersonalDataODRequestProductType = {
  OD: 'OD',
} as const;

/**
 * ###### Short offer
###### <u>Angaben zum Kurzangebot</u> Pers√∂nliche Angaben zum Angebot
 */
export type PersonalDataODRequest = Omit<PersonalDataRequest, 'product_type'> & {
  birth_date?: DateAttribute;
  gender?: ListAttribute;
  gross_annual_income?: DoubleAttribute;
  existing_insurances?: BooleanAttribute;
  number_existing_insurances?: ListAttribute;
  accumulated_annual_pensions?: DoubleAttribute;
  smoker?: BooleanAttribute;
  professional_data: PersonalDataProfessionalDataRequest;
  product_type: PersonalDataODRequestProductType;
} & Required<Pick<Omit<PersonalDataRequest, 'product_type'> & {
  birth_date?: DateAttribute;
  gender?: ListAttribute;
  gross_annual_income?: DoubleAttribute;
  existing_insurances?: BooleanAttribute;
  number_existing_insurances?: ListAttribute;
  accumulated_annual_pensions?: DoubleAttribute;
  smoker?: BooleanAttribute;
  professional_data: PersonalDataProfessionalDataRequest;
  product_type: PersonalDataODRequestProductType;
}, 'productType' | 'professional_data' | 'product_type'>>;

export interface PersonalDataRequest {
  /** Discriminator property */
  product_type?: string;
}

/**
 * ###### Professional details
###### <u>Beruflichen Angaben</u>
 */
export interface PersonalDataProfessionalDataRequest {
  qualification?: ListAttribute;
  occupation?: ListAttribute;
  physical_job_proportion?: IntegerAttribute;
  travel_job_proportion?: IntegerAttribute;
  office_job_proportion?: IntegerAttribute;
  employed_since?: DateAttribute;
  personnel_responsibility?: IntegerAttribute;
  educational_attainment?: ListAttribute;
  education?: ListAttribute;
  /** ###### Scoring risk group
###### <u>Risikogruppe aus Scoring Service</u> */
  scoring_risk_group?: string;
  /** ###### Scoring risk group ratio
###### <u>Risikogruppenanteil aus Scoring Service</u> */
  scoring_risk_group_ratio?: number;
  /** ###### Scoring max pension
###### <u>maxPension aus Scoring Service</u> */
  max_pension?: number;
  /** ###### Scoring final age
###### <u>finalAge aus Scoring Service</u> */
  final_age?: number;
  /** ###### Scoring max entry age
###### <u>maxEntryAge aus Scoring Service</u> */
  max_entry_age?: number;
}

/**
 * ###### Risk assessment
###### <u>Risikopr√ºfung</u>
 */
export interface RiskData {
  /** ###### Vote
###### <u>Votum</u> */
  vote?: string;
  /** ###### Case-ID
###### <u>Case-ID</u> */
  case_id?: string;
}

/**
 * ###### Short offer data
###### <u>Kurzangebotangaben</u>
 */
export interface ShortOfferData {
  simple?: ListAttribute;
  extended?: ListAttribute;
  personalized?: BooleanAttribute;
  alternative_policyholder?: BooleanAttribute;
  policyholder?: ShortOfferPerson;
  insured_person?: ShortOfferPerson;
}

/**
 * ###### Short offer person
###### <u>Kurzangebotperson</u>
 */
export type ShortOfferPerson = Person1;

/**
 * ###### Personal details
###### <u>Personenangaben</u>
 */
export interface Person1 {
  given_name?: StringAttribute;
  family_name?: StringAttribute;
  salutation?: ListAttribute;
}

/**
 * ###### String attribute including value and meta data
###### <u>String-Attribute inkl. Wert und Metadaten</u>
 */
export interface StringAttribute {
  /** @nullable */
  value?: string | null;
  metadata: StringMetaData;
}

/**
 * ###### String meta data
###### <u>String Metadaten</u>
 */
export type StringMetaData = MetaData & {
  /** ###### Minimum length
###### <u>Min L√§nge</u> */
  minLength?: number;
  /** ###### Maximum length
###### <u>Max L√§nge</u> */
  maxLength?: number;
};

export interface OfferResponse {
  /** Discriminator property */
  product_type?: string;
}

export type OfferODResponseProductType = typeof OfferODResponseProductType[keyof typeof OfferODResponseProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OfferODResponseProductType = {
  OD: 'OD',
} as const;

/**
 * ###### An offer contains all the necessary personal and tariff information for a calculation and the creation of a short proposal
###### <u>Ein Angebot enth√§lt alle notwendigen pers√∂nlichen und tariflichen Angaben f√ºr eine Kalkulation und eine Erstellung eines Kurzangebots</u>
 */
export type OfferODResponse = Omit<OfferResponse, 'product_type'> & {
  /** primary key */
  readonly id: number;
  /** update timestamp */
  readonly update_date: CustomDateTime;
  /** foreign key to process resource */
  process_id: number;
  product?: Product;
  tariff_data?: TariffDataOD;
  personal_data: PersonalDataOD;
  risk_data?: RiskData;
  short_offer_data?: ShortOfferData;
  product_type: OfferODResponseProductType;
} & Required<Pick<Omit<OfferResponse, 'product_type'> & {
  /** primary key */
  readonly id: number;
  /** update timestamp */
  readonly update_date: CustomDateTime;
  /** foreign key to process resource */
  process_id: number;
  product?: Product;
  tariff_data?: TariffDataOD;
  personal_data: PersonalDataOD;
  risk_data?: RiskData;
  short_offer_data?: ShortOfferData;
  product_type: OfferODResponseProductType;
}, 'id' | 'personal_data' | 'process_id' | 'productType' | 'update_date' | 'product_type'>>;

export interface OfferCalculation {
  /** Discriminator property */
  product_type: string;
  /** ###### A flag to control if a validation without calculation should be performed
###### <u>Flag zu Steuerung, ob nur eine Validierung ohne Berechnung durchgef√ºhrt werden soll</u> */
  validation_only: boolean;
  /** ###### A tariff attribute that is required for partial product validation
###### <u>Ein Tarifattribut, welches f√ºr eine partielle Produktvalidierung ben√∂tigt wird</u> */
  changed_attribute: string;
}

export type OfferCalculationODProductType = typeof OfferCalculationODProductType[keyof typeof OfferCalculationODProductType];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const OfferCalculationODProductType = {
  OD: 'OD',
} as const;

/**
 * ###### An offer contains all the necessary personal and tariff information for a calculation and the creation of a short proposal
###### <u>Ein Angebot enth√§lt alle notwendigen pers√∂nlichen und tariflichen Angaben f√ºr eine Kalkulation und eine Erstellung eines Kurzangebots</u>
 */
export type OfferCalculationOD = Omit<OfferCalculation, 'product_type'> & {
  offer: OfferODRequest;
  product_type: OfferCalculationODProductType;
} & Required<Pick<Omit<OfferCalculation, 'product_type'> & {
  offer: OfferODRequest;
  product_type: OfferCalculationODProductType;
}, 'offer'>>;

/**
 * Unauthorized
 */
export type N401UnauthorizedResponse = ApiError;

/**
 * Internal Server Error
 */
export type N500InternalServerErrorResponse = ApiError;

/**
 * Bad Request
 */
export type N400BadRequestResponse = ApiError;

/**
 * Resource Not Found
 */
export type N404NotFoundResponse = ApiError;

/**
 * ###### Provides default values for the personal data based on product type
###### <u>Stellt Standardwerte f√ºr die Personendaten basierend auf dem Produkttyp bereit</u>
 * @summary Provides default personal data
 */
export const getDefaultPersonalData = <TData = AxiosResponse<PersonalDataResponse>>(
    productType: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/offers/personalData/${productType}`,options
    );
  }

/**
 * ###### Provides default values for the tariff data based on product type
###### <u>Stellt Standardwerte f√ºr die Tariffdaten basierend auf dem Produkttyp bereit</u>
 * @summary Provides default tariff data
 */
export const getDefaultTariffData = <TData = AxiosResponse<TariffDataResponse>>(
    productType: string, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/offers/tariffData/${productType}`,options
    );
  }

/**
 * ###### Validates personal data in the 'Occupational disability' tariff
###### <u>Validiert die Personendaten im Tarif 'Berufsunf√§higkeit'</u>
 * @summary Validates personal data
 */
export const validatePersonalData = <TData = AxiosResponse<PersonalDataResponse>>(
    personalDataValidation: PersonalDataValidation, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/offers/personalData/validations`,
      personalDataValidation,options
    );
  }

/**
 * ###### Validates short offer data
###### <u>Validiert die Kurzangebotangaben</u>
 * @summary Validates short offer data
 */
export const validateShortOfferData = <TData = AxiosResponse<ShortOfferData>>(
    shortOfferData: ShortOfferData, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/offers/shortOfferData/validations`,
      shortOfferData,options
    );
  }

/**
 * ###### Creates a new resource 'Offer' in the process context. This action takes place when the personal details of the offer are saved. The newly created resource is returned.
###### <u>Erstellt eine neue Ressource 'Angebot' im Prozesskontext. Diese Aktion findet bei der Speicherung der Personenangaben des Angebotes statt. Die neu erstellte Ressource wird zur√ºckgeliefert.</u>
 * @summary Create an offer
 */
export const createOffer = <TData = AxiosResponse<OfferResponse>>(
    offerRequest: OfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/offers`,
      offerRequest,options
    );
  }

/**
 * ###### Provides the complete resource 'Offer' with all associated data such as personal and tariff details
###### <u>Liefert die vollst√§ndige Ressource 'Angebot' mit allen damit verbundenen Daten wie pers√∂nliche und tarifflichen Angaben</u>
 * @summary Find an offer
 */
export const getOffer = <TData = AxiosResponse<OfferResponse>>(
    offerId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.get(
      `/offers/${offerId}`,options
    );
  }

/**
 * ###### Updates an offer
###### <u>Aktualisiert ein Angebot</u>
 * @summary Update an offer
 */
export const updateOffer = <TData = AxiosResponse<OfferResponse>>(
    offerId: number,
    offerRequest: OfferRequest, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.put(
      `/offers/${offerId}`,
      offerRequest,options
    );
  }

/**
 * ###### Calculates an resource 'Offer' and returns the offer with calculated data
###### <u>Berechnet eine Ressource 'Angebot' und liefert es mit dem Berechnungsergebnis zur√ºck.</u>
 * @summary Calculate an offer
 */
export const calculateOffer = <TData = AxiosResponse<OfferResponse>>(
    offerCalculation: OfferCalculation, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/offers/calculations`,
      offerCalculation,options
    );
  }

/**
 * ###### Creates and returns a PDF document 'short offer' on an existing resource 'Offer'
###### <u>Erstellt ein PDF Dokument 'Kurzangebot' an einer bestehenden Ressource 'Angebot' und liefert es zur√ºck</u>
 * @summary Create an offer PDF document
 */
export const createOfferDocument = <TData = AxiosResponse<Blob>>(
    offerId: number, options?: AxiosRequestConfig
 ): Promise<TData> => {
    return axios.default.post(
      `/offers/${offerId}/documents`,undefined,{
        responseType: 'blob',
    ...options,}
    );
  }

export type GetDefaultPersonalDataResult = AxiosResponse<PersonalDataResponse>
export type GetDefaultTariffDataResult = AxiosResponse<TariffDataResponse>
export type ValidatePersonalDataResult = AxiosResponse<PersonalDataResponse>
export type ValidateShortOfferDataResult = AxiosResponse<ShortOfferData>
export type CreateOfferResult = AxiosResponse<OfferResponse>
export type GetOfferResult = AxiosResponse<OfferResponse>
export type UpdateOfferResult = AxiosResponse<OfferResponse>
export type CalculateOfferResult = AxiosResponse<OfferResponse>
export type CreateOfferDocumentResult = AxiosResponse<Blob>
