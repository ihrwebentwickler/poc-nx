/**
 * OfferService
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { ApiErrorDTO } from '../model/models';
import { OfferCalculationDTO } from '../model/models';
import { OfferRequestDTO } from '../model/models';
import { OfferResponseDTO } from '../model/models';
import { PersonalDataResponseDTO } from '../model/models';
import { PersonalDataValidationDTO } from '../model/models';
import { ShortOfferDataDTO } from '../model/models';
import { TariffDataResponseDTO } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface OffersServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Calculate an offer
     * ###### Calculates an resource \&#39;Offer\&#39; and returns the offer with calculated data ###### &lt;u&gt;Berechnet eine Ressource \&#39;Angebot\&#39; und liefert es mit dem Berechnungsergebnis zurück.&lt;/u&gt;
     * @param offerCalculationDTO offer to calculate
     */
    calculateOffer(offerCalculationDTO: OfferCalculationDTO, extraHttpRequestParams?: any): Observable<OfferResponseDTO>;

    /**
     * Create an offer
     * ###### Creates a new resource \&#39;Offer\&#39; in the process context. This action takes place when the personal details of the offer are saved. The newly created resource is returned. ###### &lt;u&gt;Erstellt eine neue Ressource \&#39;Angebot\&#39; im Prozesskontext. Diese Aktion findet bei der Speicherung der Personenangaben des Angebotes statt. Die neu erstellte Ressource wird zurückgeliefert.&lt;/u&gt;
     * @param offerRequestDTO new offer
     */
    createOffer(offerRequestDTO: OfferRequestDTO, extraHttpRequestParams?: any): Observable<OfferResponseDTO>;

    /**
     * Create an offer PDF document
     * ###### Creates and returns a PDF document \&#39;short offer\&#39; on an existing resource \&#39;Offer\&#39; ###### &lt;u&gt;Erstellt ein PDF Dokument \&#39;Kurzangebot\&#39; an einer bestehenden Ressource \&#39;Angebot\&#39; und liefert es zurück&lt;/u&gt;
     * @param offerId offer ID
     */
    createOfferDocument(offerId: number, extraHttpRequestParams?: any): Observable<Blob>;

    /**
     * Provides default personal data
     * ###### Provides default values for the personal data based on product type ###### &lt;u&gt;Stellt Standardwerte für die Personendaten basierend auf dem Produkttyp bereit&lt;/u&gt;
     * @param productType product type
     */
    getDefaultPersonalData(productType: string, extraHttpRequestParams?: any): Observable<PersonalDataResponseDTO>;

    /**
     * Provides default tariff data
     * ###### Provides default values for the tariff data based on product type ###### &lt;u&gt;Stellt Standardwerte für die Tariffdaten basierend auf dem Produkttyp bereit&lt;/u&gt;
     * @param productType product type
     */
    getDefaultTariffData(productType: string, extraHttpRequestParams?: any): Observable<TariffDataResponseDTO>;

    /**
     * Find an offer
     * ###### Provides the complete resource \&#39;Offer\&#39; with all associated data such as personal and tariff details ###### &lt;u&gt;Liefert die vollständige Ressource \&#39;Angebot\&#39; mit allen damit verbundenen Daten wie persönliche und tarifflichen Angaben&lt;/u&gt;
     * @param offerId ID of offer to return
     */
    getOffer(offerId: number, extraHttpRequestParams?: any): Observable<OfferResponseDTO>;

    /**
     * Update an offer
     * ###### Updates an offer ###### &lt;u&gt;Aktualisiert ein Angebot&lt;/u&gt;
     * @param offerId ID of offer to update
     * @param offerRequestDTO offer to update
     */
    updateOffer(offerId: number, offerRequestDTO: OfferRequestDTO, extraHttpRequestParams?: any): Observable<OfferResponseDTO>;

    /**
     * Validates personal data
     * ###### Validates personal data in the \&#39;Occupational disability\&#39; tariff ###### &lt;u&gt;Validiert die Personendaten im Tarif \&#39;Berufsunfähigkeit\&#39;&lt;/u&gt;
     * @param personalDataValidationDTO offer
     */
    validatePersonalData(personalDataValidationDTO: PersonalDataValidationDTO, extraHttpRequestParams?: any): Observable<PersonalDataResponseDTO>;

    /**
     * Validates short offer data
     * ###### Validates short offer data ###### &lt;u&gt;Validiert die Kurzangebotangaben&lt;/u&gt;
     * @param shortOfferDataDTO short offer
     */
    validateShortOfferData(shortOfferDataDTO: ShortOfferDataDTO, extraHttpRequestParams?: any): Observable<ShortOfferDataDTO>;

}
